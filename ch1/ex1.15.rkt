#lang racket

(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

(sine 12.15)

; a.  How many times is the procedure p applied when (sine 12.15) is evaluated?
; (sine 12.15) ends up calling p with (sine 4.05)
; (sine 4.05) calls p with (sine 1.35)
; (sine 1.35) calls p with (sine 0.45)
; (sine 0.45) calls p with (sine 0.15)
; (sine 0.15) calls p with (sine 0.05)
; (sine 0.05) doesn't call p
; p is called 5 times


; b.  What is the order of growth in space and number of steps (as a function of a) used by the process generated by the sine procedure when (sine a) is evaluated?
; log(a) presumably since the input is a fraction the size of the previous call.



